name: Build and publish Docker image with version
on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

jobs:
  build_and_test_docker:
    name: Build and test Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
      - name: Build image
        run: docker buildx build --output "type=image,push=false" --platform linux/amd64 --tag ors-test .
      - name: Prepare folders
        run: |
          mkdir ${GITHUB_WORKSPACE}/docker/graphs
          mkdir ${GITHUB_WORKSPACE}/docker/pre-built
          chmod ugo+rwx ${GITHUB_WORKSPACE}/docker/graphs
          chmod ugo+rwx ${GITHUB_WORKSPACE}/docker/pre-built
          chmod ugo+rwx ${GITHUB_WORKSPACE}/docker/data/elevation_cache
      - name: Run container
        run : docker run -d -p 127.0.0.1:8080:8080/tcp -e BUILD_GRAPHS=True -v ${GITHUB_WORKSPACE}/docker/pre-built:/ors-core/data/pre-built -v ${GITHUB_WORKSPACE}/docker/graphs:/ors-core/data/graphs -v ${GITHUB_WORKSPACE}/docker/data/elevation_cache:/ors-core/data/elevation_cache --name ors-test-container ors-test
      - name: Test ORS status
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/run_test.sh"
          ${GITHUB_WORKSPACE}/.github/workflows/run_test.sh
        shell: bash
      - name: Compress graphs, compile ors.war and copy to pre-built folder
        run: |
          sudo chmod -R ugo+rwx ${GITHUB_WORKSPACE}/docker/graphs
          tar -cJf ${GITHUB_WORKSPACE}/docker/pre-built/graph.tar.xz ${GITHUB_WORKSPACE}/docker/graphs
          docker exec ors-test-container bash -c  "cd ./openrouteservice && mvn compile war:war"
          docker exec ors-test-container bash -c  "cp -f /ors-core/openrouteservice/target/ors.war /ors-core/data/pre-built/ors.war "
          docker stop ors-test-container
          docker rm ors-test-container
          rm -rf ${GITHUB_WORKSPACE}/docker/graphs/*
      - name: Run docker container without pre-built directory (should fail)
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/run_test_prebuilt_fail.sh"
          ${GITHUB_WORKSPACE}/.github/workflows/run_test_prebuilt_fail.sh
        shell: bash
      - name: Run docker container with pre-built directory
        run: |
          docker run -d -p 127.0.0.1:8080:8080/tcp -e USE_PREBUILT=True -v ${GITHUB_WORKSPACE}/docker/pre-built:/ors-core/data/pre-built \
          -v ${GITHUB_WORKSPACE}/docker/graphs:/ors-core/data/graphs -v ${GITHUB_WORKSPACE}/docker/data/elevation_cache:/ors-core/data/elevation_cache --name ors-test-container-2 ors-test
      - name: Test ORS status
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/run_test.sh"
          ${GITHUB_WORKSPACE}/.github/workflows/run_test.sh
        shell: bash
  build_and_publish_docker:
    name: Push Docker image to docker hub and github packages
    runs-on: ubuntu-latest
    needs: build_and_test_docker
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Prepare
        id: prepare
        run: |
          function test_version() {
            # Loads all versions ever published under the given namespace (max 1024) and splits them. The result is sorted.
            curl -s -S "https://registry.hub.docker.com/v2/repositories/openrouteservice/openrouteservice/tags/?page_size=1024" |
              sed -e 's/,/,\n/g' -e 's/\[/\[\n/g' |
              grep '"name"' |
              awk -F\" '{print $4;}' |
              sort -fu
          }

          DOCKER_IMAGE=openrouteservice/openrouteservice
          CURRENT_VERSIONS=$(test_version)
          LATEST_IMAGE_VERSION=${{ steps.previoustag.outputs.tag }}
          HIGHEST_IMAGE_VERSION=${{ steps.semvers.outputs.v_mayor }}
          DOCKER_PLATFORMS=linux/amd64
          BUILD_VERSION=true

          # We should the latest and highest tag via https://github.com/WyriHaximus/github-action-next-semvers
          TAGS_LATEST_VERSION="--tag ${DOCKER_IMAGE}:${LATEST_IMAGE_VERSION}"
          TAGS_HIGHEST_VERSION="--tag ${DOCKER_IMAGE}:${HIGHEST_IMAGE_VERSION}"
          echo "HIGHEST MAYOR VERSION: $TAGS_HIGHEST_VERSION"
          TAGS_LATEST="--tag ${DOCKER_IMAGE}:latest"
          TAGS_NIGHTLY="--tag ${DOCKER_IMAGE}:nightly"

          # Test if the latest published version is already in the versions at docker hub. If so skip the version build.
          if [[ $CURRENT_VERSIONS =~ $LATEST_IMAGE_VERSION ]]; then
            echo "Image version: $LATEST_IMAGE_VERSION present or latest. Skipping it!"
            BUILD_VERSION=false
          fi

          echo ::set-output name=build_version::${BUILD_VERSION}
          echo ::set-output name=buildx_args_version::--platform ${DOCKER_PLATFORMS} \
                      ${TAGS_LATEST_VERSION} .
          echo ::set-output name=buildx_args_latest::--platform ${DOCKER_PLATFORMS} \
                      ${TAGS_LATEST} .
          echo ::set-output name=buildx_args_nightly::--platform ${DOCKER_PLATFORMS} \
                      ${TAGS_NIGHTLY} .
      - name: Build nightly
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_nightly }}
      - name: Checkout version if needed
        if: ${{ steps.prepare.outputs.build_version == 'true' }}
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.previoustag.outputs.tag }}
      - name: Build version if needed
        if: ${{ steps.prepare.outputs.build_version == 'true' }}
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_version }}
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_latest }}
      - name: Login to DockerHub
        if: ${{ success() && github.ref == 'refs/heads/master' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Publish version and latest if not present
        if: ${{ github.ref == 'refs/heads/master' && steps.prepare.outputs.build_version == 'true' }}
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_version }}
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_latest }}
      - name: Publish nightly
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_nightly }}
